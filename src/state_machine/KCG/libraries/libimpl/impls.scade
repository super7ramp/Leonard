package impls
   open impl;
   
   function imported #pragma kcg name iToUint8_int_impls #end iToUint8_int(In1 : int) returns (Out1 : uint8) specialize iToUint8 ;
   function imported #pragma kcg name iToUint8_real_impls #end iToUint8_real(In1 : real) returns (Out1 : uint8) specialize iToUint8 ;
   function imported #pragma kcg name iToUint8_int8_impls #end iToUint8_int8(In1 : int8) returns (Out1 : uint8) specialize iToUint8 ;
   function imported #pragma kcg name iToUint8_uint16_impls #end iToUint8_uint16(In1 : uint16) returns (Out1 : uint8) specialize iToUint8 ;
   function imported #pragma kcg name iToUint8_int16_impls #end iToUint8_int16(In1 : int16) returns (Out1 : uint8) specialize iToUint8 ;
   function imported #pragma kcg name iToUint8_uint32_impls #end iToUint8_uint32(In1 : uint32) returns (Out1 : uint8) specialize iToUint8 ;
   function imported #pragma kcg name iToUint8_int32_impls #end iToUint8_int32(In1 : int32) returns (Out1 : uint8) specialize iToUint8 ;

   function imported #pragma kcg name iToInt8_int_impls #end iToInt8_int(In1 : int) returns (Out1 : int8) specialize iToInt8 ;
   function imported #pragma kcg name iToInt8_real_impls #end iToInt8_real(In1 : real) returns (Out1 : int8) specialize iToInt8 ;
   function imported #pragma kcg name iToInt8_uint8_impls #end iToInt8_uint8(In1 : uint8) returns (Out1 : int8) specialize iToInt8 ;
   function imported #pragma kcg name iToInt8_uint16_impls #end iToInt8_uint16(In1 : uint16) returns (Out1 : int8) specialize iToInt8 ;
   function imported #pragma kcg name iToInt8_int16_impls #end iToInt8_int16(In1 : int16) returns (Out1 : int8) specialize iToInt8 ;
   function imported #pragma kcg name iToInt8_uint32_impls #end iToInt8_uint32(In1 : uint32) returns (Out1 : int8) specialize iToInt8 ;
   function imported #pragma kcg name iToInt8_int32_impls #end iToInt8_int32(In1 : int32) returns (Out1 : int8) specialize iToInt8 ;

   function imported #pragma kcg name iToUint16_int_impls #end iToUint16_int(In1 : int) returns (Out1 : uint16) specialize iToUint16 ;
   function imported #pragma kcg name iToUint16_real_impls #end iToUint16_real(In1 : real) returns (Out1 : uint16) specialize iToUint16 ;
   function imported #pragma kcg name iToUint16_uint8_impls #end iToUint16_uint8(In1 : uint8) returns (Out1 : uint16) specialize iToUint16 ;
   function imported #pragma kcg name iToUint16_int8_impls #end iToUint16_int8(In1 : int8) returns (Out1 : uint16) specialize iToUint16 ;
   function imported #pragma kcg name iToUint16_int16_impls #end iToUint16_int16(In1 : int16) returns (Out1 : uint16) specialize iToUint16 ;
   function imported #pragma kcg name iToUint16_uint32_impls #end iToUint16_uint32(In1 : uint32) returns (Out1 : uint16) specialize iToUint16 ;
   function imported #pragma kcg name iToUint16_int32_impls #end iToUint16_int32(In1 : int32) returns (Out1 : uint16) specialize iToUint16 ;

   function imported #pragma kcg name iToInt16_int_impls #end iToInt16_int(In1 : int) returns (Out1 : int16) specialize iToInt16 ;
   function imported #pragma kcg name iToInt16_real_impls #end iToInt16_real(In1 : real) returns (Out1 : int16) specialize iToInt16 ;
   function imported #pragma kcg name iToInt16_uint8_impls #end iToInt16_uint8(In1 : uint8) returns (Out1 : int16) specialize iToInt16 ;
   function imported #pragma kcg name iToInt16_int8_impls #end iToInt16_int8(In1 : int8) returns (Out1 : int16) specialize iToInt16 ;
   function imported #pragma kcg name iToInt16_uint16_impls #end iToInt16_uint16(In1 : uint16) returns (Out1 : int16) specialize iToInt16 ;
   function imported #pragma kcg name iToInt16_uint32_impls #end iToInt16_uint32(In1 : uint32) returns (Out1 : int16) specialize iToInt16 ;
   function imported #pragma kcg name iToInt16_int32_impls #end iToInt16_int32(In1 : int32) returns (Out1 : int16) specialize iToInt16 ;

   function imported #pragma kcg name iToUint32_int_impls #end iToUint32_int(In1 : int) returns (Out1 : uint32) specialize iToUint32 ;
   function imported #pragma kcg name iToUint32_real_impls #end iToUint32_real(In1 : real) returns (Out1 : uint32) specialize iToUint32 ;
   function imported #pragma kcg name iToUint32_uint8_impls #end iToUint32_uint8(In1 : uint8) returns (Out1 : uint32) specialize iToUint32 ;
   function imported #pragma kcg name iToUint32_int8_impls #end iToUint32_int8(In1 : int8) returns (Out1 : uint32) specialize iToUint32 ;
   function imported #pragma kcg name iToUint32_uint16_impls #end iToUint32_uint16(In1 : uint16) returns (Out1 : uint32) specialize iToUint32 ;
   function imported #pragma kcg name iToUint32_int16_impls #end iToUint32_int16(In1 : int16) returns (Out1 : uint32) specialize iToUint32 ;
   function imported #pragma kcg name iToUint32_int32_impls #end iToUint32_int32(In1 : int32) returns (Out1 : uint32) specialize iToUint32 ;

   function imported #pragma kcg name iToInt32_int_impls #end iToInt32_int(In1 : int) returns (Out1 : int32) specialize iToInt32 ;
   function imported #pragma kcg name iToInt32_real_impls #end iToInt32_real(In1 : real) returns (Out1 : int32) specialize iToInt32 ;
   function imported #pragma kcg name iToInt32_uint8_impls #end iToInt32_uint8(In1 : uint8) returns (Out1 : int32) specialize iToInt32 ;
   function imported #pragma kcg name iToInt32_int8_impls #end iToInt32_int8(In1 : int8) returns (Out1 : int32) specialize iToInt32 ;
   function imported #pragma kcg name iToInt32_uint16_impls #end iToInt32_uint16(In1 : uint16) returns (Out1 : int32) specialize iToInt32 ;
   function imported #pragma kcg name iToInt32_int16_impls #end iToInt32_int16(In1 : int16) returns (Out1 : int32) specialize iToInt32 ;
   function imported #pragma kcg name iToInt32_uint32_impls #end iToInt32_uint32(In1 : uint32) returns (Out1 : int32) specialize iToInt32 ;

   function imported #pragma kcg name iToInt_int8_impls #end iToInt_int8(In1 : int8) returns (Out1 : int) specialize iToInt ;
   function imported #pragma kcg name iToInt_uint8_impls #end iToInt_uint8(In1 : uint8) returns (Out1 : int) specialize iToInt ;
   function imported #pragma kcg name iToInt_int16_impls #end iToInt_int16(In1 : int16) returns (Out1 : int) specialize iToInt ;
   function imported #pragma kcg name iToInt_uint16_impls #end iToInt_uint16(In1 : uint16) returns (Out1 : int) specialize iToInt ;
   function imported #pragma kcg name iToInt_int32_impls #end iToInt_int32(In1 : int32) returns (Out1 : int) specialize iToInt ;
   function imported #pragma kcg name iToInt_uint32_impls #end iToInt_uint32(In1 : uint32) returns (Out1 : int) specialize iToInt ;

   function imported #pragma kcg name iToReal_int8_impls #end iToReal_int8(In1 : int8) returns (Out1 : real) specialize iToReal ;
   function imported #pragma kcg name iToReal_uint8_impls #end iToReal_uint8(In1 : uint8) returns (Out1 : real) specialize iToReal ;
   function imported #pragma kcg name iToReal_int16_impls #end iToReal_int16(In1 : int16) returns (Out1 : real) specialize iToReal ;
   function imported #pragma kcg name iToReal_uint16_impls #end iToReal_uint16(In1 : uint16) returns (Out1 : real) specialize iToReal ;
   function imported #pragma kcg name iToReal_int32_impls #end iToReal_int32(In1 : int32) returns (Out1 : real) specialize iToReal ;
   function imported #pragma kcg name iToReal_uint32_impls #end iToReal_uint32(In1 : uint32) returns (Out1 : real) specialize iToReal ;


/*****************************
 * Arithmetic functions      *
 *****************************/

/* Sum */

   function imported #pragma kcg name iSum_int8_impls #end iSum_int8(In1 : int8; In2 : int8) returns (Out1 : int8) specialize iSum ;
   function imported #pragma kcg name iSum_uint8_impls #end iSum_uint8(In1 : uint8; In2 : uint8) returns (Out1 : uint8) specialize iSum ;
   function imported #pragma kcg name iSum_int16_impls #end iSum_int16(In1 : int16; In2 : int16) returns (Out1 : int16) specialize iSum ;
   function imported #pragma kcg name iSum_uint16_impls #end iSum_uint16(In1 : uint16; In2 : uint16) returns (Out1 : uint16) specialize iSum ;
   function imported #pragma kcg name iSum_int32_impls #end iSum_int32(In1 : int32; In2 : int32) returns (Out1 : int32) specialize iSum ;
   function imported #pragma kcg name iSum_uint32_impls #end iSum_uint32(In1 : uint32; In2 : uint32) returns (Out1 : uint32) specialize iSum ;

   function imported #pragma kcg name iSumSat_int8_impls #end iSumSat_int8(In1 : int8; In2 : int8) returns (Out1 : int8) specialize iSumSat ;
   function imported #pragma kcg name iSumSat_uint8_impls #end iSumSat_uint8(In1 : uint8; In2 : uint8) returns (Out1 : uint8) specialize iSumSat ;
   function imported #pragma kcg name iSumSat_int16_impls #end iSumSat_int16(In1 : int16; In2 : int16) returns (Out1 : int16) specialize iSumSat ;
   function imported #pragma kcg name iSumSat_uint16_impls #end iSumSat_uint16(In1 : uint16; In2 : uint16) returns (Out1 : uint16) specialize iSumSat ;
-- Caution: if int64 or uint64 are not defined, these operators must not be used or must be redefined
   function imported #pragma kcg name iSumSat_int32_impls #end iSumSat_int32(In1 : int32; In2 : int32) returns (Out1 : int32) specialize iSumSat ;
   function imported #pragma kcg name iSumSat_uint32_impls #end iSumSat_uint32(In1 : uint32; In2 : uint32) returns (Out1 : uint32) specialize iSumSat ;



/* Substraction */

   function imported #pragma kcg name iSub_int8_impls #end iSub_int8(In1 : int8; In2 : int8) returns (Out1 : int8) specialize iSub ;
   function imported #pragma kcg name iSub_uint8_impls #end iSub_uint8(In1 : uint8; In2 : uint8) returns (Out1 : uint8) specialize iSub ;
   function imported #pragma kcg name iSub_int16_impls #end iSub_int16(In1 : int16; In2 : int16) returns (Out1 : int16) specialize iSub ;
   function imported #pragma kcg name iSub_uint16_impls #end iSub_uint16(In1 : uint16; In2 : uint16) returns (Out1 : uint16) specialize iSub ;
   function imported #pragma kcg name iSub_int32_impls #end iSub_int32(In1 : int32; In2 : int32) returns (Out1 : int32) specialize iSub ;
   function imported #pragma kcg name iSub_uint32_impls #end iSub_uint32(In1 : uint32; In2 : uint32) returns (Out1 : uint32) specialize iSub ;


/* Substraction Protected*/

   function imported #pragma kcg name iSubSat_int8_impls #end iSubSat_int8(In1 : int8; In2 : int8) returns (Out1 : int8) specialize iSubSat ;
   function imported #pragma kcg name iSubSat_uint8_impls #end iSubSat_uint8(In1 : uint8; In2 : uint8) returns (Out1 : uint8) specialize iSubSat ;
   function imported #pragma kcg name iSubSat_int16_impls #end iSubSat_int16(In1 : int16; In2 : int16) returns (Out1 : int16) specialize iSubSat ;
   function imported #pragma kcg name iSubSat_uint16_impls #end iSubSat_uint16(In1 : uint16; In2 : uint16) returns (Out1 : uint16) specialize iSubSat ;
-- Caution: if int64 or uint64 are not defined, these operators must not be used or must be redefined 
   function imported #pragma kcg name iSubSat_int32_impls #end iSubSat_int32(In1 : int32; In2 : int32) returns (Out1 : int32) specialize iSubSat ;
   function imported #pragma kcg name iSubSat_uint32_impls #end iSubSat_uint32(In1 : uint32; In2 : uint32) returns (Out1 : uint32) specialize iSubSat ;


/* Negation */

   function imported #pragma kcg name iNeg_int8_impls #end iNeg_int8(In1 : int8) returns (Out1 : int8) specialize iNeg ;
   function imported #pragma kcg name iNeg_int16_impls #end iNeg_int16(In1 : int16) returns (Out1 : int16) specialize iNeg ;
   function imported #pragma kcg name iNeg_int32_impls #end iNeg_int32(In1 : int32) returns (Out1 : int32) specialize iNeg ;


/* Negation Protected */

   function imported #pragma kcg name iNegSat_int8_impls #end iNegSat_int8(In1 : int8) returns (Out1 : int8) specialize iNegSat ;
   function imported #pragma kcg name iNegSat_int16_impls #end iNegSat_int16(In1 : int16) returns (Out1 : int16) specialize iNegSat ;
   function imported #pragma kcg name iNegSat_int32_impls #end iNegSat_int32(In1 : int32) returns (Out1 : int32) specialize iNegSat ;

/* Product */

/* Mul */

   function imported #pragma kcg name iMul_int8_impls #end iMul_int8(In1 : int8; In2 : int8) returns (Out1 : int8) specialize iMul ;
   function imported #pragma kcg name iMul_uint8_impls #end iMul_uint8(In1 : uint8; In2 : uint8) returns (Out1 : uint8) specialize iMul ;
   function imported #pragma kcg name iMul_int16_impls #end iMul_int16(In1 : int16; In2 : int16) returns (Out1 : int16) specialize iMul ;
   function imported #pragma kcg name iMul_uint16_impls #end iMul_uint16(In1 : uint16; In2 : uint16) returns (Out1 : uint16) specialize iMul ;
   function imported #pragma kcg name iMul_int32_impls #end iMul_int32(In1 : int32; In2 : int32) returns (Out1 : int32) specialize iMul ;
   function imported #pragma kcg name iMul_uint32_impls #end iMul_uint32(In1 : uint32; In2 : uint32) returns (Out1 : uint32) specialize iMul ;


/* Mul Protected */

   function imported #pragma kcg name iMulSat_int8_impls #end iMulSat_int8(In1 : int8; In2 : int8) returns (Out1 : int8) specialize iMulSat ;
   function imported #pragma kcg name iMulSat_uint8_impls #end iMulSat_uint8(In1 : uint8; In2 : uint8) returns (Out1 : uint8) specialize iMulSat ;
   function imported #pragma kcg name iMulSat_int16_impls #end iMulSat_int16(In1 : int16; In2 : int16) returns (Out1 : int16) specialize iMulSat ;
   function imported #pragma kcg name iMulSat_uint16_impls #end iMulSat_uint16(In1 : uint16; In2 : uint16) returns (Out1 : uint16) specialize iMulSat ;
-- Caution: if int64 or uint64 are not defined, these operators must not be used or must be redefined */
   function imported #pragma kcg name iMulSat_int32_impls #end iMulSat_int32(In1 : int32; In2 : int32) returns (Out1 : int32) specialize iMulSat ;
   function imported #pragma kcg name iMulSat_uint32_impls #end iMulSat_uint32(In1 : uint32; In2 : uint32) returns (Out1 : uint32) specialize iMulSat ;



/* Products that avoids cast on the 2 operands to get result on the upper size */
/* Mul16 */
   function imported #pragma kcg name iMul16_int8_impls #end iMul16_int8(In1 : int8; In2 : int8) returns (Out1 : int16) specialize iMul16 ;

/* Mul16U */
   function imported #pragma kcg name iMul16U_uint8_impls #end iMul16U_uint8(In1 : uint8; In2 : uint8) returns (Out1 : uint16) specialize iMul16U ;

/* Mul32 */
   function imported #pragma kcg name iMul32_int16_impls #end iMul32_int16(In1 : int16; In2 : int16) returns (Out1 : int32) specialize iMul32 ;

/* Mul32U */
   function imported #pragma kcg name iMul32U_uint16_impls #end iMul32U_uint16(In1 : uint16; In2 : uint16) returns (Out1 : uint32) specialize iMul32U ;


/* Division (rounding toward zero), with Underflow check (next release) */

   function imported #pragma kcg name iDiv_int8_impls #end iDiv_int8(In1 : int8; In2 : int8) returns (Out1 : int8) specialize iDiv ;
   function imported #pragma kcg name iDiv_uint8_impls #end iDiv_uint8(In1 : uint8; In2 : uint8) returns (Out1 : uint8) specialize iDiv ;
   function imported #pragma kcg name iDiv_int16_impls #end iDiv_int16(In1 : int16; In2 : int16) returns (Out1 : int16) specialize iDiv ;
   function imported #pragma kcg name iDiv_uint16_impls #end iDiv_uint16(In1 : uint16; In2 : uint16) returns (Out1 : uint16) specialize iDiv ;
   function imported #pragma kcg name iDiv_int32_impls #end iDiv_int32(In1 : int32; In2 : int32) returns (Out1 : int32) specialize iDiv ;
   function imported #pragma kcg name iDiv_uint32_impls #end iDiv_uint32(In1 : uint32; In2 : uint32) returns (Out1 : uint32) specialize iDiv ;

/* Division (rounding toward zero) protected, with Underflow check (next release) */

   function imported #pragma kcg name iDivSat_int8_impls #end iDivSat_int8(In1 : int8; In2 : int8) returns (Out1 : int8) specialize iDivSat ;
   function imported #pragma kcg name iDivSat_uint8_impls #end iDivSat_uint8(In1 : uint8; In2 : uint8) returns (Out1 : uint8) specialize iDivSat ;
   function imported #pragma kcg name iDivSat_int16_impls #end iDivSat_int16(In1 : int16; In2 : int16) returns (Out1 : int16) specialize iDivSat ;
   function imported #pragma kcg name iDivSat_uint16_impls #end iDivSat_uint16(In1 : uint16; In2 : uint16) returns (Out1 : uint16) specialize iDivSat ;
   function imported #pragma kcg name iDivSat_int32_impls #end iDivSat_int32(In1 : int32; In2 : int32) returns (Out1 : int32) specialize iDivSat ;
   function imported #pragma kcg name iDivSat_uint32_impls #end iDivSat_uint32(In1 : uint32; In2 : uint32) returns (Out1 : uint32) specialize iDivSat ;


/* Division (rounding toward zero), no Underflow check */

   function imported #pragma kcg name iDivFix_int8_impls #end iDivFix_int8(In1 : int8; In2 : int8) returns (Out1 : int8) specialize iDivFix ;
   function imported #pragma kcg name iDivFix_uint8_impls #end iDivFix_uint8(In1 : uint8; In2 : uint8) returns (Out1 : uint8) specialize iDivFix ;
   function imported #pragma kcg name iDivFix_int16_impls #end iDivFix_int16(In1 : int16; In2 : int16) returns (Out1 : int16) specialize iDivFix ;
   function imported #pragma kcg name iDivFix_uint16_impls #end iDivFix_uint16(In1 : uint16; In2 : uint16) returns (Out1 : uint16) specialize iDivFix ;
   function imported #pragma kcg name iDivFix_int32_impls #end iDivFix_int32(In1 : int32; In2 : int32) returns (Out1 : int32) specialize iDivFix ;
   function imported #pragma kcg name iDivFix_uint32_impls #end iDivFix_uint32(In1 : uint32; In2 : uint32) returns (Out1 : uint32) specialize iDivFix ;


/* Division (rounding Ceil), no Underflow check */

   function imported #pragma kcg name iDivCeil_int8_impls #end iDivCeil_int8(In1 : int8; In2 : int8) returns (Out1 : int8) specialize iDivCeil ;
   function imported #pragma kcg name iDivCeil_uint8_impls #end iDivCeil_uint8(In1 : uint8; In2 : uint8) returns (Out1 : uint8) specialize iDivCeil ;
   function imported #pragma kcg name iDivCeil_int16_impls #end iDivCeil_int16(In1 : int16; In2 : int16) returns (Out1 : int16) specialize iDivCeil ;
   function imported #pragma kcg name iDivCeil_uint16_impls #end iDivCeil_uint16(In1 : uint16; In2 : uint16) returns (Out1 : uint16) specialize iDivCeil ;
   function imported #pragma kcg name iDivCeil_int32_impls #end iDivCeil_int32(In1 : int32; In2 : int32) returns (Out1 : int32) specialize iDivCeil ;
   function imported #pragma kcg name iDivCeil_uint32_impls #end iDivCeil_uint32(In1 : uint32; In2 : uint32) returns (Out1 : uint32) specialize iDivCeil ;


/* Division (rounding floor), no Underflow check */

   function imported #pragma kcg name iDivFloor_int8_impls #end iDivFloor_int8(In1 : int8; In2 : int8) returns (Out1 : int8) specialize iDivFloor ;
   function imported #pragma kcg name iDivFloor_uint8_impls #end iDivFloor_uint8(In1 : uint8; In2 : uint8) returns (Out1 : uint8) specialize iDivFloor ;
   function imported #pragma kcg name iDivFloor_int16_impls #end iDivFloor_int16(In1 : int16; In2 : int16) returns (Out1 : int16) specialize iDivFloor ;
   function imported #pragma kcg name iDivFloor_uint16_impls #end iDivFloor_uint16(In1 : uint16; In2 : uint16) returns (Out1 : uint16) specialize iDivFloor ;
   function imported #pragma kcg name iDivFloor_int32_impls #end iDivFloor_int32(In1 : int32; In2 : int32) returns (Out1 : int32) specialize iDivFloor ;
   function imported #pragma kcg name iDivFloor_uint32_impls #end iDivFloor_uint32(In1 : uint32; In2 : uint32) returns (Out1 : uint32) specialize iDivFloor ;



/* Modulo */

   function imported #pragma kcg name iMod_int8_impls #end iMod_int8(In1 : int8; In2 : int8) returns (Out1 : int8) specialize iMod ;
   function imported #pragma kcg name iMod_uint8_impls #end iMod_uint8(In1 : uint8; In2 : uint8) returns (Out1 : uint8) specialize iMod ;
   function imported #pragma kcg name iMod_int16_impls #end iMod_int16(In1 : int16; In2 : int16) returns (Out1 : int16) specialize iMod ;
   function imported #pragma kcg name iMod_uint16_impls #end iMod_uint16(In1 : uint16; In2 : uint16) returns (Out1 : uint16) specialize iMod ;
   function imported #pragma kcg name iMod_int32_impls #end iMod_int32(In1 : int32; In2 : int32) returns (Out1 : int32) specialize iMod ;
   function imported #pragma kcg name iMod_uint32_impls #end iMod_uint32(In1 : uint32; In2 : uint32) returns (Out1 : uint32) specialize iMod ;



/*****************************
 * Compare functions         *
 *****************************/

/* Less */
   function imported #pragma kcg name iLess_int8_int8_impls #end iLess_int8_int8(In1: int8; In2: int8) returns (Out1: bool) specialize iLess ;
   function imported #pragma kcg name iLess_int8_int16_impls #end iLess_int8_int16(In1: int8; In2: int16) returns (Out1: bool) specialize iLess ;
   function imported #pragma kcg name iLess_int8_int32_impls #end iLess_int8_int32(In1: int8; In2: int32) returns (Out1: bool) specialize iLess ;
   function imported #pragma kcg name iLess_uint8_uint8_impls #end iLess_uint8_uint8(In1: uint8; In2: uint8) returns (Out1: bool) specialize iLess ;
   function imported #pragma kcg name iLess_uint8_uint16_impls #end iLess_uint8_uint16(In1: uint8; In2: uint16) returns (Out1: bool) specialize iLess ;
   function imported #pragma kcg name iLess_uint8_uint32_impls #end iLess_uint8_uint32(In1: uint8; In2: uint32) returns (Out1: bool) specialize iLess ;
   function imported #pragma kcg name iLess_int16_int8_impls #end iLess_int16_int8(In1: int16; In2: int8) returns (Out1: bool) specialize iLess ;
   function imported #pragma kcg name iLess_int16_int16_impls #end iLess_int16_int16(In1: int16; In2: int16) returns (Out1: bool) specialize iLess ;
   function imported #pragma kcg name iLess_int16_int32_impls #end iLess_int16_int32(In1: int16; In2: int32) returns (Out1: bool) specialize iLess ;
   function imported #pragma kcg name iLess_uint16_uint8_impls #end iLess_uint16_uint8(In1: uint16; In2: uint8) returns (Out1: bool) specialize iLess ;
   function imported #pragma kcg name iLess_uint16_uint16_impls #end iLess_uint16_uint16(In1: uint16; In2: uint16) returns (Out1: bool) specialize iLess ;
   function imported #pragma kcg name iLess_uint16_uint32_impls #end iLess_uint16_uint32(In1: uint16; In2: uint32) returns (Out1: bool) specialize iLess ;
   function imported #pragma kcg name iLess_int32_int8_impls #end iLess_int32_int8(In1: int32; In2: int8) returns (Out1: bool) specialize iLess ;
   function imported #pragma kcg name iLess_int32_int16_impls #end iLess_int32_int16(In1: int32; In2: int16) returns (Out1: bool) specialize iLess ;
   function imported #pragma kcg name iLess_int32_int32_impls #end iLess_int32_int32(In1: int32; In2: int32) returns (Out1: bool) specialize iLess ;
   function imported #pragma kcg name iLess_uint32_uint8_impls #end iLess_uint32_uint8(In1: uint32; In2: uint8) returns (Out1: bool) specialize iLess ;
   function imported #pragma kcg name iLess_uint32_uint16_impls #end iLess_uint32_uint16(In1: uint32; In2: uint16) returns (Out1: bool) specialize iLess ;
   function imported #pragma kcg name iLess_uint32_uint32_impls #end iLess_uint32_uint32(In1: uint32; In2: uint32) returns (Out1: bool) specialize iLess ;

/* Less Equal */
   function imported #pragma kcg name iLessEq_int8_int8_impls #end iLessEq_int8_int8(In1: int8; In2: int8) returns (Out1: bool) specialize iLessEq ;
   function imported #pragma kcg name iLessEq_int8_int16_impls #end iLessEq_int8_int16(In1: int8; In2: int16) returns (Out1: bool) specialize iLessEq ;
   function imported #pragma kcg name iLessEq_int8_int32_impls #end iLessEq_int8_int32(In1: int8; In2: int32) returns (Out1: bool) specialize iLessEq ;
   function imported #pragma kcg name iLessEq_uint8_uint8_impls #end iLessEq_uint8_uint8(In1: uint8; In2: uint8) returns (Out1: bool) specialize iLessEq ;
   function imported #pragma kcg name iLessEq_uint8_uint16_impls #end iLessEq_uint8_uint16(In1: uint8; In2: uint16) returns (Out1: bool) specialize iLessEq ;
   function imported #pragma kcg name iLessEq_uint8_uint32_impls #end iLessEq_uint8_uint32(In1: uint8; In2: uint32) returns (Out1: bool) specialize iLessEq ;
   function imported #pragma kcg name iLessEq_int16_int8_impls #end iLessEq_int16_int8(In1: int16; In2: int8) returns (Out1: bool) specialize iLessEq ;
   function imported #pragma kcg name iLessEq_int16_int16_impls #end iLessEq_int16_int16(In1: int16; In2: int16) returns (Out1: bool) specialize iLessEq ;
   function imported #pragma kcg name iLessEq_int16_int32_impls #end iLessEq_int16_int32(In1: int16; In2: int32) returns (Out1: bool) specialize iLessEq ;
   function imported #pragma kcg name iLessEq_uint16_uint8_impls #end iLessEq_uint16_uint8(In1: uint16; In2: uint8) returns (Out1: bool) specialize iLessEq ;
   function imported #pragma kcg name iLessEq_uint16_uint16_impls #end iLessEq_uint16_uint16(In1: uint16; In2: uint16) returns (Out1: bool) specialize iLessEq ;
   function imported #pragma kcg name iLessEq_uint16_uint32_impls #end iLessEq_uint16_uint32(In1: uint16; In2: uint32) returns (Out1: bool) specialize iLessEq ;
   function imported #pragma kcg name iLessEq_int32_int8_impls #end iLessEq_int32_int8(In1: int32; In2: int8) returns (Out1: bool) specialize iLessEq ;
   function imported #pragma kcg name iLessEq_int32_int16_impls #end iLessEq_int32_int16(In1: int32; In2: int16) returns (Out1: bool) specialize iLessEq ;
   function imported #pragma kcg name iLessEq_int32_int32_impls #end iLessEq_int32_int32(In1: int32; In2: int32) returns (Out1: bool) specialize iLessEq ;
   function imported #pragma kcg name iLessEq_uint32_uint8_impls #end iLessEq_uint32_uint8(In1: uint32; In2: uint8) returns (Out1: bool) specialize iLessEq ;
   function imported #pragma kcg name iLessEq_uint32_uint16_impls #end iLessEq_uint32_uint16(In1: uint32; In2: uint16) returns (Out1: bool) specialize iLessEq ;
   function imported #pragma kcg name iLessEq_uint32_uint32_impls #end iLessEq_uint32_uint32(In1: uint32; In2: uint32) returns (Out1: bool) specialize iLessEq ;

/* Equal */
   function imported #pragma kcg name iEqual_int8_int8_impls #end iEqual_int8_int8(In1: int8; In2: int8) returns (Out1: bool) specialize iEqual ;
   function imported #pragma kcg name iEqual_int8_int16_impls #end iEqual_int8_int16(In1: int8; In2: int16) returns (Out1: bool) specialize iEqual ;
   function imported #pragma kcg name iEqual_int8_int32_impls #end iEqual_int8_int32(In1: int8; In2: int32) returns (Out1: bool) specialize iEqual ;
   function imported #pragma kcg name iEqual_uint8_uint8_impls #end iEqual_uint8_uint8(In1: uint8; In2: uint8) returns (Out1: bool) specialize iEqual ;
   function imported #pragma kcg name iEqual_uint8_uint16_impls #end iEqual_uint8_uint16(In1: uint8; In2: uint16) returns (Out1: bool) specialize iEqual ;
   function imported #pragma kcg name iEqual_uint8_uint32_impls #end iEqual_uint8_uint32(In1: uint8; In2: uint32) returns (Out1: bool) specialize iEqual ;
   function imported #pragma kcg name iEqual_int16_int8_impls #end iEqual_int16_int8(In1: int16; In2: int8) returns (Out1: bool) specialize iEqual ;
   function imported #pragma kcg name iEqual_int16_int16_impls #end iEqual_int16_int16(In1: int16; In2: int16) returns (Out1: bool) specialize iEqual ;
   function imported #pragma kcg name iEqual_int16_int32_impls #end iEqual_int16_int32(In1: int16; In2: int32) returns (Out1: bool) specialize iEqual ;
   function imported #pragma kcg name iEqual_uint16_uint8_impls #end iEqual_uint16_uint8(In1: uint16; In2: uint8) returns (Out1: bool) specialize iEqual ;
   function imported #pragma kcg name iEqual_uint16_uint16_impls #end iEqual_uint16_uint16(In1: uint16; In2: uint16) returns (Out1: bool) specialize iEqual ;
   function imported #pragma kcg name iEqual_uint16_uint32_impls #end iEqual_uint16_uint32(In1: uint16; In2: uint32) returns (Out1: bool) specialize iEqual ;
   function imported #pragma kcg name iEqual_int32_int8_impls #end iEqual_int32_int8(In1: int32; In2: int8) returns (Out1: bool) specialize iEqual ;
   function imported #pragma kcg name iEqual_int32_int16_impls #end iEqual_int32_int16(In1: int32; In2: int16) returns (Out1: bool) specialize iEqual ;
   function imported #pragma kcg name iEqual_int32_int32_impls #end iEqual_int32_int32(In1: int32; In2: int32) returns (Out1: bool) specialize iEqual ;
   function imported #pragma kcg name iEqual_uint32_uint8_impls #end iEqual_uint32_uint8(In1: uint32; In2: uint8) returns (Out1: bool) specialize iEqual ;
   function imported #pragma kcg name iEqual_uint32_uint16_impls #end iEqual_uint32_uint16(In1: uint32; In2: uint16) returns (Out1: bool) specialize iEqual ;
   function imported #pragma kcg name iEqual_uint32_uint32_impls #end iEqual_uint32_uint32(In1: uint32; In2: uint32) returns (Out1: bool) specialize iEqual ;

/* Different */
   function imported #pragma kcg name iDifferent_int8_int8_impls #end iDifferent_int8_int8(In1: int8; In2: int8) returns (Out1: bool) specialize iDifferent ;
   function imported #pragma kcg name iDifferent_int8_int16_impls #end iDifferent_int8_int16(In1: int8; In2: int16) returns (Out1: bool) specialize iDifferent ;
   function imported #pragma kcg name iDifferent_int8_int32_impls #end iDifferent_int8_int32(In1: int8; In2: int32) returns (Out1: bool) specialize iDifferent ;
   function imported #pragma kcg name iDifferent_uint8_uint8_impls #end iDifferent_uint8_uint8(In1: uint8; In2: uint8) returns (Out1: bool) specialize iDifferent ;
   function imported #pragma kcg name iDifferent_uint8_uint16_impls #end iDifferent_uint8_uint16(In1: uint8; In2: uint16) returns (Out1: bool) specialize iDifferent ;
   function imported #pragma kcg name iDifferent_uint8_uint32_impls #end iDifferent_uint8_uint32(In1: uint8; In2: uint32) returns (Out1: bool) specialize iDifferent ;
   function imported #pragma kcg name iDifferent_int16_int8_impls #end iDifferent_int16_int8(In1: int16; In2: int8) returns (Out1: bool) specialize iDifferent ;
   function imported #pragma kcg name iDifferent_int16_int16_impls #end iDifferent_int16_int16(In1: int16; In2: int16) returns (Out1: bool) specialize iDifferent ;
   function imported #pragma kcg name iDifferent_int16_int32_impls #end iDifferent_int16_int32(In1: int16; In2: int32) returns (Out1: bool) specialize iDifferent ;
   function imported #pragma kcg name iDifferent_uint16_uint8_impls #end iDifferent_uint16_uint8(In1: uint16; In2: uint8) returns (Out1: bool) specialize iDifferent ;
   function imported #pragma kcg name iDifferent_uint16_uint16_impls #end iDifferent_uint16_uint16(In1: uint16; In2: uint16) returns (Out1: bool) specialize iDifferent ;
   function imported #pragma kcg name iDifferent_uint16_uint32_impls #end iDifferent_uint16_uint32(In1: uint16; In2: uint32) returns (Out1: bool) specialize iDifferent ;
   function imported #pragma kcg name iDifferent_int32_int8_impls #end iDifferent_int32_int8(In1: int32; In2: int8) returns (Out1: bool) specialize iDifferent ;
   function imported #pragma kcg name iDifferent_int32_int16_impls #end iDifferent_int32_int16(In1: int32; In2: int16) returns (Out1: bool) specialize iDifferent ;
   function imported #pragma kcg name iDifferent_int32_int32_impls #end iDifferent_int32_int32(In1: int32; In2: int32) returns (Out1: bool) specialize iDifferent ;
   function imported #pragma kcg name iDifferent_uint32_uint8_impls #end iDifferent_uint32_uint8(In1: uint32; In2: uint8) returns (Out1: bool) specialize iDifferent ;
   function imported #pragma kcg name iDifferent_uint32_uint16_impls #end iDifferent_uint32_uint16(In1: uint32; In2: uint16) returns (Out1: bool) specialize iDifferent ;
   function imported #pragma kcg name iDifferent_uint32_uint32_impls #end iDifferent_uint32_uint32(In1: uint32; In2: uint32) returns (Out1: bool) specialize iDifferent ;

/* Greater */
   function imported #pragma kcg name iGreater_int8_int8_impls #end iGreater_int8_int8(In1: int8; In2: int8) returns (Out1: bool) specialize iGreater ;
   function imported #pragma kcg name iGreater_int8_int16_impls #end iGreater_int8_int16(In1: int8; In2: int16) returns (Out1: bool) specialize iGreater ;
   function imported #pragma kcg name iGreater_int8_int32_impls #end iGreater_int8_int32(In1: int8; In2: int32) returns (Out1: bool) specialize iGreater ;
   function imported #pragma kcg name iGreater_uint8_uint8_impls #end iGreater_uint8_uint8(In1: uint8; In2: uint8) returns (Out1: bool) specialize iGreater ;
   function imported #pragma kcg name iGreater_uint8_uint16_impls #end iGreater_uint8_uint16(In1: uint8; In2: uint16) returns (Out1: bool) specialize iGreater ;
   function imported #pragma kcg name iGreater_uint8_uint32_impls #end iGreater_uint8_uint32(In1: uint8; In2: uint32) returns (Out1: bool) specialize iGreater ;
   function imported #pragma kcg name iGreater_int16_int8_impls #end iGreater_int16_int8(In1: int16; In2: int8) returns (Out1: bool) specialize iGreater ;
   function imported #pragma kcg name iGreater_int16_int16_impls #end iGreater_int16_int16(In1: int16; In2: int16) returns (Out1: bool) specialize iGreater ;
   function imported #pragma kcg name iGreater_int16_int32_impls #end iGreater_int16_int32(In1: int16; In2: int32) returns (Out1: bool) specialize iGreater ;
   function imported #pragma kcg name iGreater_uint16_uint8_impls #end iGreater_uint16_uint8(In1: uint16; In2: uint8) returns (Out1: bool) specialize iGreater ;
   function imported #pragma kcg name iGreater_uint16_uint16_impls #end iGreater_uint16_uint16(In1: uint16; In2: uint16) returns (Out1: bool) specialize iGreater ;
   function imported #pragma kcg name iGreater_uint16_uint32_impls #end iGreater_uint16_uint32(In1: uint16; In2: uint32) returns (Out1: bool) specialize iGreater ;
   function imported #pragma kcg name iGreater_int32_int8_impls #end iGreater_int32_int8(In1: int32; In2: int8) returns (Out1: bool) specialize iGreater ;
   function imported #pragma kcg name iGreater_int32_int16_impls #end iGreater_int32_int16(In1: int32; In2: int16) returns (Out1: bool) specialize iGreater ;
   function imported #pragma kcg name iGreater_int32_int32_impls #end iGreater_int32_int32(In1: int32; In2: int32) returns (Out1: bool) specialize iGreater ;
   function imported #pragma kcg name iGreater_uint32_uint8_impls #end iGreater_uint32_uint8(In1: uint32; In2: uint8) returns (Out1: bool) specialize iGreater ;
   function imported #pragma kcg name iGreater_uint32_uint16_impls #end iGreater_uint32_uint16(In1: uint32; In2: uint16) returns (Out1: bool) specialize iGreater ;
   function imported #pragma kcg name iGreater_uint32_uint32_impls #end iGreater_uint32_uint32(In1: uint32; In2: uint32) returns (Out1: bool) specialize iGreater ;

/* Greater Equal */
   function imported #pragma kcg name iGreaterEq_int8_int8_impls #end iGreaterEq_int8_int8(In1: int8; In2: int8) returns (Out1: bool) specialize iGreaterEq ;
   function imported #pragma kcg name iGreaterEq_int8_int16_impls #end iGreaterEq_int8_int16(In1: int8; In2: int16) returns (Out1: bool) specialize iGreaterEq ;
   function imported #pragma kcg name iGreaterEq_int8_int32_impls #end iGreaterEq_int8_int32(In1: int8; In2: int32) returns (Out1: bool) specialize iGreaterEq ;
   function imported #pragma kcg name iGreaterEq_uint8_uint8_impls #end iGreaterEq_uint8_uint8(In1: uint8; In2: uint8) returns (Out1: bool) specialize iGreaterEq ;
   function imported #pragma kcg name iGreaterEq_uint8_uint16_impls #end iGreaterEq_uint8_uint16(In1: uint8; In2: uint16) returns (Out1: bool) specialize iGreaterEq ;
   function imported #pragma kcg name iGreaterEq_uint8_uint32_impls #end iGreaterEq_uint8_uint32(In1: uint8; In2: uint32) returns (Out1: bool) specialize iGreaterEq ;
   function imported #pragma kcg name iGreaterEq_int16_int8_impls #end iGreaterEq_int16_int8(In1: int16; In2: int8) returns (Out1: bool) specialize iGreaterEq ;
   function imported #pragma kcg name iGreaterEq_int16_int16_impls #end iGreaterEq_int16_int16(In1: int16; In2: int16) returns (Out1: bool) specialize iGreaterEq ;
   function imported #pragma kcg name iGreaterEq_int16_int32_impls #end iGreaterEq_int16_int32(In1: int16; In2: int32) returns (Out1: bool) specialize iGreaterEq ;
   function imported #pragma kcg name iGreaterEq_uint16_uint8_impls #end iGreaterEq_uint16_uint8(In1: uint16; In2: uint8) returns (Out1: bool) specialize iGreaterEq ;
   function imported #pragma kcg name iGreaterEq_uint16_uint16_impls #end iGreaterEq_uint16_uint16(In1: uint16; In2: uint16) returns (Out1: bool) specialize iGreaterEq ;
   function imported #pragma kcg name iGreaterEq_uint16_uint32_impls #end iGreaterEq_uint16_uint32(In1: uint16; In2: uint32) returns (Out1: bool) specialize iGreaterEq ;
   function imported #pragma kcg name iGreaterEq_int32_int8_impls #end iGreaterEq_int32_int8(In1: int32; In2: int8) returns (Out1: bool) specialize iGreaterEq ;
   function imported #pragma kcg name iGreaterEq_int32_int16_impls #end iGreaterEq_int32_int16(In1: int32; In2: int16) returns (Out1: bool) specialize iGreaterEq ;
   function imported #pragma kcg name iGreaterEq_int32_int32_impls #end iGreaterEq_int32_int32(In1: int32; In2: int32) returns (Out1: bool) specialize iGreaterEq ;
   function imported #pragma kcg name iGreaterEq_uint32_uint8_impls #end iGreaterEq_uint32_uint8(In1: uint32; In2: uint8) returns (Out1: bool) specialize iGreaterEq ;
   function imported #pragma kcg name iGreaterEq_uint32_uint16_impls #end iGreaterEq_uint32_uint16(In1: uint32; In2: uint16) returns (Out1: bool) specialize iGreaterEq ;
   function imported #pragma kcg name iGreaterEq_uint32_uint32_impls #end iGreaterEq_uint32_uint32(In1: uint32; In2: uint32) returns (Out1: bool) specialize iGreaterEq ;



/*****************************
 * Bitwise Operators         *
 *****************************/
/* Mask AND */

   function imported #pragma kcg name iBwAND_int8_int_impls #end iBwAND_int8_int(In1: int8; Mask: int) returns (Out1: int8) specialize iBwAND ;
   function imported #pragma kcg name iBwAND_int8_impls #end iBwAND_int8(In1: int8; Mask: int8) returns (Out1: int8) specialize iBwAND ;
   function imported #pragma kcg name iBwAND_uint8_int_impls #end iBwAND_uint8_int(In1: uint8; Mask: int) returns (Out1: uint8) specialize iBwAND ;
   function imported #pragma kcg name iBwAND_uint8_impls #end iBwAND_uint8(In1: uint8; Mask: uint8) returns (Out1: uint8) specialize iBwAND ;
   function imported #pragma kcg name iBwAND_int16_int_impls #end iBwAND_int16_int(In1: int16; Mask: int) returns (Out1: int16) specialize iBwAND ;
   function imported #pragma kcg name iBwAND_int16_impls #end iBwAND_int16(In1: int16; Mask: int16) returns (Out1: int16) specialize iBwAND ;
   function imported #pragma kcg name iBwAND_uint16_int_impls #end iBwAND_uint16_int(In1: uint16; Mask: int) returns (Out1: uint16) specialize iBwAND ;
   function imported #pragma kcg name iBwAND_uint16_impls #end iBwAND_uint16(In1: uint16; Mask: uint16) returns (Out1: uint16) specialize iBwAND ;
   function imported #pragma kcg name iBwAND_int32_int_impls #end iBwAND_int32_int(In1: int32; Mask: int) returns (Out1: int32) specialize iBwAND ;
   function imported #pragma kcg name iBwAND_int32_impls #end iBwAND_int32(In1: int32; Mask: int32) returns (Out1: int32) specialize iBwAND ;
   function imported #pragma kcg name iBwAND_uint32_int_impls #end iBwAND_uint32_int(In1: uint32; Mask: int) returns (Out1: uint32) specialize iBwAND ;
   function imported #pragma kcg name iBwAND_uint32_impls #end iBwAND_uint32(In1: uint32; Mask: uint32) returns (Out1: uint32) specialize iBwAND ;

/* Mask OR */

   function imported #pragma kcg name iBwOR_int8_int_impls #end iBwOR_int8_int(In1: int8; Mask: int) returns (Out1: int8) specialize iBwOR ;
   function imported #pragma kcg name iBwOR_int8_impls #end iBwOR_int8(In1: int8; Mask: int8) returns (Out1: int8) specialize iBwOR ;
   function imported #pragma kcg name iBwOR_uint8_int_impls #end iBwOR_uint8_int(In1: uint8; Mask: int) returns (Out1: uint8) specialize iBwOR ;
   function imported #pragma kcg name iBwOR_uint8_impls #end iBwOR_uint8(In1: uint8; Mask: uint8) returns (Out1: uint8) specialize iBwOR ;
   function imported #pragma kcg name iBwOR_int16_int_impls #end iBwOR_int16_int(In1: int16; Mask: int) returns (Out1: int16) specialize iBwOR ;
   function imported #pragma kcg name iBwOR_int16_impls #end iBwOR_int16(In1: int16; Mask: int16) returns (Out1: int16) specialize iBwOR ;
   function imported #pragma kcg name iBwOR_uint16_int_impls #end iBwOR_uint16_int(In1: uint16; Mask: int) returns (Out1: uint16) specialize iBwOR ;
   function imported #pragma kcg name iBwOR_uint16_impls #end iBwOR_uint16(In1: uint16; Mask: uint16) returns (Out1: uint16) specialize iBwOR ;
   function imported #pragma kcg name iBwOR_int32_int_impls #end iBwOR_int32_int(In1: int32; Mask: int) returns (Out1: int32) specialize iBwOR ;
   function imported #pragma kcg name iBwOR_int32_impls #end iBwOR_int32(In1: int32; Mask: int32) returns (Out1: int32) specialize iBwOR ;
   function imported #pragma kcg name iBwOR_uint32_int_impls #end iBwOR_uint32_int(In1: uint32; Mask: int) returns (Out1: uint32) specialize iBwOR ;
   function imported #pragma kcg name iBwOR_uint32_impls #end iBwOR_uint32(In1: uint32; Mask: uint32) returns (Out1: uint32) specialize iBwOR ;

/* Mask XOR */

   function imported #pragma kcg name iBwXOR_int8_int_impls #end iBwXOR_int8_int(In1: int8; Mask: int) returns (Out1: int8) specialize iBwXOR ;
   function imported #pragma kcg name iBwXOR_int8_impls #end iBwXOR_int8(In1: int8; Mask: int8) returns (Out1: int8) specialize iBwXOR ;
   function imported #pragma kcg name iBwXOR_uint8_int_impls #end iBwXOR_uint8_int(In1: uint8; Mask: int) returns (Out1: uint8) specialize iBwXOR ;
   function imported #pragma kcg name iBwXOR_uint8_impls #end iBwXOR_uint8(In1: uint8; Mask: uint8) returns (Out1: uint8) specialize iBwXOR ;
   function imported #pragma kcg name iBwXOR_int16_int_impls #end iBwXOR_int16_int(In1: int16; Mask: int) returns (Out1: int16) specialize iBwXOR ;
   function imported #pragma kcg name iBwXOR_int16_impls #end iBwXOR_int16(In1: int16; Mask: int16) returns (Out1: int16) specialize iBwXOR ;
   function imported #pragma kcg name iBwXOR_uint16_int_impls #end iBwXOR_uint16_int(In1: uint16; Mask: int) returns (Out1: uint16) specialize iBwXOR ;
   function imported #pragma kcg name iBwXOR_uint16_impls #end iBwXOR_uint16(In1: uint16; Mask: uint16) returns (Out1: uint16) specialize iBwXOR ;
   function imported #pragma kcg name iBwXOR_int32_int_impls #end iBwXOR_int32_int(In1: int32; Mask: int) returns (Out1: int32) specialize iBwXOR ;
   function imported #pragma kcg name iBwXOR_int32_impls #end iBwXOR_int32(In1: int32; Mask: int32) returns (Out1: int32) specialize iBwXOR ;
   function imported #pragma kcg name iBwXOR_uint32_int_impls #end iBwXOR_uint32_int(In1: uint32; Mask: int) returns (Out1: uint32) specialize iBwXOR ;
   function imported #pragma kcg name iBwXOR_uint32_impls #end iBwXOR_uint32(In1: uint32; Mask: uint32) returns (Out1: uint32) specialize iBwXOR ;

/* NOT */

   function imported #pragma kcg name iBwNOT_int8_impls #end iBwNOT_int8(In1: int8) returns (Out1: int8) specialize iBwNOT ;
   function imported #pragma kcg name iBwNOT_uint8_impls #end iBwNOT_uint8(In1: uint8) returns (Out1: uint8) specialize iBwNOT ;
   function imported #pragma kcg name iBwNOT_int16_impls #end iBwNOT_int16(In1: int16) returns (Out1: int16) specialize iBwNOT ;
   function imported #pragma kcg name iBwNOT_uint16_impls #end iBwNOT_uint16(In1: uint16) returns (Out1: uint16) specialize iBwNOT ;
   function imported #pragma kcg name iBwNOT_int32_impls #end iBwNOT_int32(In1: int32) returns (Out1: int32) specialize iBwNOT ;
   function imported #pragma kcg name iBwNOT_uint32_impls #end iBwNOT_uint32(In1: uint32) returns (Out1: uint32) specialize iBwNOT ;


/* Left Shift */
/* No check of overflow in simulation */

   function imported #pragma kcg name iShiftLeft_int8_int_impls #end iShiftLeft_int8_int(In1: int8; Shift: int) returns (Out1: int8) specialize iShiftLeft ;
   function imported #pragma kcg name iShiftLeft_int8_impls #end iShiftLeft_int8(In1: int8; Shift: int8) returns (Out1: int8) specialize iShiftLeft ;
   function imported #pragma kcg name iShiftLeft_uint8_int_impls #end iShiftLeft_uint8_int(In1: uint8; Shift: int) returns (Out1: uint8) specialize iShiftLeft ;
   function imported #pragma kcg name iShiftLeft_uint8_impls #end iShiftLeft_uint8(In1: uint8; Shift: uint8) returns (Out1: uint8) specialize iShiftLeft ;
   function imported #pragma kcg name iShiftLeft_int16_int_impls #end iShiftLeft_int16_int(In1: int16; Shift: int) returns (Out1: int16) specialize iShiftLeft ;
   function imported #pragma kcg name iShiftLeft_int16_impls #end iShiftLeft_int16(In1: int16; Shift: int16) returns (Out1: int16) specialize iShiftLeft ;
   function imported #pragma kcg name iShiftLeft_uint16_int_impls #end iShiftLeft_uint16_int(In1: uint16; Shift: int) returns (Out1: uint16) specialize iShiftLeft ;
   function imported #pragma kcg name iShiftLeft_uint16_impls #end iShiftLeft_uint16(In1: uint16; Shift: uint16) returns (Out1: uint16) specialize iShiftLeft ;
   function imported #pragma kcg name iShiftLeft_int32_int_impls #end iShiftLeft_int32_int(In1: int32; Shift: int) returns (Out1: int32) specialize iShiftLeft ;
   function imported #pragma kcg name iShiftLeft_int32_impls #end iShiftLeft_int32(In1: int32; Shift: int32) returns (Out1: int32) specialize iShiftLeft ;
   function imported #pragma kcg name iShiftLeft_uint32_int_impls #end iShiftLeft_uint32_int(In1: uint32; Shift: int) returns (Out1: uint32) specialize iShiftLeft ;
   function imported #pragma kcg name iShiftLeft_uint32_impls #end iShiftLeft_uint32(In1: uint32; Shift: uint32) returns (Out1: uint32) specialize iShiftLeft ;


/* Left Shift */
/* "arithmetic" left shift: Checks overflows in simulation (next release) */

   function imported #pragma kcg name iDecLsb_int8_int_impls #end iDecLsb_int8_int(In1: int8; Shift: int) returns (Out1: int8) specialize iDecLsb ;
   function imported #pragma kcg name iDecLsb_int8_impls #end iDecLsb_int8(In1: int8; Shift: int8) returns (Out1: int8) specialize iDecLsb ;
   function imported #pragma kcg name iDecLsb_uint8_int_impls #end iDecLsb_uint8_int(In1: uint8; Shift: int) returns (Out1: uint8) specialize iDecLsb ;
   function imported #pragma kcg name iDecLsb_uint8_impls #end iDecLsb_uint8(In1: uint8; Shift: uint8) returns (Out1: uint8) specialize iDecLsb ;
   function imported #pragma kcg name iDecLsb_int16_int_impls #end iDecLsb_int16_int(In1: int16; Shift: int) returns (Out1: int16) specialize iDecLsb ;
   function imported #pragma kcg name iDecLsb_int16_impls #end iDecLsb_int16(In1: int16; Shift: int16) returns (Out1: int16) specialize iDecLsb ;
   function imported #pragma kcg name iDecLsb_uint16_int_impls #end iDecLsb_uint16_int(In1: uint16; Shift: int) returns (Out1: uint16) specialize iDecLsb ;
   function imported #pragma kcg name iDecLsb_uint16_impls #end iDecLsb_uint16(In1: uint16; Shift: uint16) returns (Out1: uint16) specialize iDecLsb ;
   function imported #pragma kcg name iDecLsb_int32_int_impls #end iDecLsb_int32_int(In1: int32; Shift: int) returns (Out1: int32) specialize iDecLsb ;
   function imported #pragma kcg name iDecLsb_int32_impls #end iDecLsb_int32(In1: int32; Shift: int32) returns (Out1: int32) specialize iDecLsb ;
   function imported #pragma kcg name iDecLsb_uint32_int_impls #end iDecLsb_uint32_int(In1: uint32; Shift: int) returns (Out1: uint32) specialize iDecLsb ;
   function imported #pragma kcg name iDecLsb_uint32_impls #end iDecLsb_uint32(In1: uint32; Shift: uint32) returns (Out1: uint32) specialize iDecLsb ;


/* Right Shift (rounding toward floor) */
/* No check of underflow in simulation */

   function imported #pragma kcg name iShiftRight_int8_int_impls #end iShiftRight_int8_int(In1: int8; Shift: int) returns (Out1: int8) specialize iShiftRight ;
   function imported #pragma kcg name iShiftRight_int8_impls #end iShiftRight_int8(In1: int8; Shift: int8) returns (Out1: int8) specialize iShiftRight ;
   function imported #pragma kcg name iShiftRight_uint8_int_impls #end iShiftRight_uint8_int(In1: uint8; Shift: int) returns (Out1: uint8) specialize iShiftRight ;
   function imported #pragma kcg name iShiftRight_uint8_impls #end iShiftRight_uint8(In1: uint8; Shift: uint8) returns (Out1: uint8) specialize iShiftRight ;
   function imported #pragma kcg name iShiftRight_int16_int_impls #end iShiftRight_int16_int(In1: int16; Shift: int) returns (Out1: int16) specialize iShiftRight ;
   function imported #pragma kcg name iShiftRight_int16_impls #end iShiftRight_int16(In1: int16; Shift: int16) returns (Out1: int16) specialize iShiftRight ;
   function imported #pragma kcg name iShiftRight_uint16_int_impls #end iShiftRight_uint16_int(In1: uint16; Shift: int) returns (Out1: uint16) specialize iShiftRight ;
   function imported #pragma kcg name iShiftRight_uint16_impls #end iShiftRight_uint16(In1: uint16; Shift: uint16) returns (Out1: uint16) specialize iShiftRight ;
   function imported #pragma kcg name iShiftRight_int32_int_impls #end iShiftRight_int32_int(In1: int32; Shift: int) returns (Out1: int32) specialize iShiftRight ;
   function imported #pragma kcg name iShiftRight_int32_impls #end iShiftRight_int32(In1: int32; Shift: int32) returns (Out1: int32) specialize iShiftRight ;
   function imported #pragma kcg name iShiftRight_uint32_int_impls #end iShiftRight_uint32_int(In1: uint32; Shift: int) returns (Out1: uint32) specialize iShiftRight ;
   function imported #pragma kcg name iShiftRight_uint32_impls #end iShiftRight_uint32(In1: uint32; Shift: uint32) returns (Out1: uint32) specialize iShiftRight ;


/* "arithmetic" Right Shift, rounding toward floor */
/* Checks underflows (i.e. result becomes 0) in simulation (next release) */

   function imported #pragma kcg name iIncLsbFloor_int8_int_impls #end iIncLsbFloor_int8_int(In1: int8; Shift: int) returns (Out1: int8) specialize iIncLsbFloor ;
   function imported #pragma kcg name iIncLsbFloor_int8_impls #end iIncLsbFloor_int8(In1: int8; Shift: int8) returns (Out1: int8) specialize iIncLsbFloor ;
   function imported #pragma kcg name iIncLsbFloor_uint8_int_impls #end iIncLsbFloor_uint8_int(In1: uint8; Shift: int) returns (Out1: uint8) specialize iIncLsbFloor ;
   function imported #pragma kcg name iIncLsbFloor_uint8_impls #end iIncLsbFloor_uint8(In1: uint8; Shift: uint8) returns (Out1: uint8) specialize iIncLsbFloor ;
   function imported #pragma kcg name iIncLsbFloor_int16_int_impls #end iIncLsbFloor_int16_int(In1: int16; Shift: int) returns (Out1: int16) specialize iIncLsbFloor ;
   function imported #pragma kcg name iIncLsbFloor_int16_impls #end iIncLsbFloor_int16(In1: int16; Shift: int16) returns (Out1: int16) specialize iIncLsbFloor ;
   function imported #pragma kcg name iIncLsbFloor_uint16_int_impls #end iIncLsbFloor_uint16_int(In1: uint16; Shift: int) returns (Out1: uint16) specialize iIncLsbFloor ;
   function imported #pragma kcg name iIncLsbFloor_uint16_impls #end iIncLsbFloor_uint16(In1: uint16; Shift: uint16) returns (Out1: uint16) specialize iIncLsbFloor ;
   function imported #pragma kcg name iIncLsbFloor_int32_int_impls #end iIncLsbFloor_int32_int(In1: int32; Shift: int) returns (Out1: int32) specialize iIncLsbFloor ;
   function imported #pragma kcg name iIncLsbFloor_int32_impls #end iIncLsbFloor_int32(In1: int32; Shift: int32) returns (Out1: int32) specialize iIncLsbFloor ;
   function imported #pragma kcg name iIncLsbFloor_uint32_int_impls #end iIncLsbFloor_uint32_int(In1: uint32; Shift: int) returns (Out1: uint32) specialize iIncLsbFloor ;
   function imported #pragma kcg name iIncLsbFloor_uint32_impls #end iIncLsbFloor_uint32(In1: uint32; Shift: uint32) returns (Out1: uint32) specialize iIncLsbFloor ;

/* "arithmetic" Right Shift, rounding toward ceilling */
/*  Checks underflows (i.e. result becomes 0) in simulation (next release) */

   function imported #pragma kcg name iIncLsbCeil_int8_int_impls #end iIncLsbCeil_int8_int(In1: int8; Shift: int) returns (Out1: int8) specialize iIncLsbCeil ;
   function imported #pragma kcg name iIncLsbCeil_int8_impls #end iIncLsbCeil_int8(In1: int8; Shift: int8) returns (Out1: int8) specialize iIncLsbCeil ;
   function imported #pragma kcg name iIncLsbCeil_uint8_int_impls #end iIncLsbCeil_uint8_int(In1: uint8; Shift: int) returns (Out1: uint8) specialize iIncLsbCeil ;
   function imported #pragma kcg name iIncLsbCeil_uint8_impls #end iIncLsbCeil_uint8(In1: uint8; Shift: uint8) returns (Out1: uint8) specialize iIncLsbCeil ;
   function imported #pragma kcg name iIncLsbCeil_int16_int_impls #end iIncLsbCeil_int16_int(In1: int16; Shift: int) returns (Out1: int16) specialize iIncLsbCeil ;
   function imported #pragma kcg name iIncLsbCeil_int16_impls #end iIncLsbCeil_int16(In1: int16; Shift: int16) returns (Out1: int16) specialize iIncLsbCeil ;
   function imported #pragma kcg name iIncLsbCeil_uint16_int_impls #end iIncLsbCeil_uint16_int(In1: uint16; Shift: int) returns (Out1: uint16) specialize iIncLsbCeil ;
   function imported #pragma kcg name iIncLsbCeil_uint16_impls #end iIncLsbCeil_uint16(In1: uint16; Shift: uint16) returns (Out1: uint16) specialize iIncLsbCeil ;
   function imported #pragma kcg name iIncLsbCeil_int32_int_impls #end iIncLsbCeil_int32_int(In1: int32; Shift: int) returns (Out1: int32) specialize iIncLsbCeil ;
   function imported #pragma kcg name iIncLsbCeil_int32_impls #end iIncLsbCeil_int32(In1: int32; Shift: int32) returns (Out1: int32) specialize iIncLsbCeil ;
   function imported #pragma kcg name iIncLsbCeil_uint32_int_impls #end iIncLsbCeil_uint32_int(In1: uint32; Shift: int) returns (Out1: uint32) specialize iIncLsbCeil ;
   function imported #pragma kcg name iIncLsbCeil_uint32_impls #end iIncLsbCeil_uint32(In1: uint32; Shift: uint32) returns (Out1: uint32) specialize iIncLsbCeil ;

/* "arithmetic" Right Shift, rounding toward zero */
/* Checks underflows (i.e. result becomes 0) in simulation (next release) */
/* for signed type (for unsigned type, is iIncLsbFloor_def) */

   function imported #pragma kcg name iIncLsbFix_int8_int_impls #end iIncLsbFix_int8_int(In1: int8; Shift: int) returns (Out1: int8) specialize iIncLsbFix ;
   function imported #pragma kcg name iIncLsbFix_int8_impls #end iIncLsbFix_int8(In1: int8; Shift: int8) returns (Out1: int8) specialize iIncLsbFix ;
   function imported #pragma kcg name iIncLsbFix_uint8_int_impls #end iIncLsbFix_uint8_int(In1: uint8; Shift: int) returns (Out1: uint8) specialize iIncLsbFix ;
   function imported #pragma kcg name iIncLsbFix_uint8_impls #end iIncLsbFix_uint8(In1: uint8; Shift: uint8) returns (Out1: uint8) specialize iIncLsbFix ;
   function imported #pragma kcg name iIncLsbFix_int16_int_impls #end iIncLsbFix_int16_int(In1: int16; Shift: int) returns (Out1: int16) specialize iIncLsbFix ;
   function imported #pragma kcg name iIncLsbFix_int16_impls #end iIncLsbFix_int16(In1: int16; Shift: int16) returns (Out1: int16) specialize iIncLsbFix ;
   function imported #pragma kcg name iIncLsbFix_uint16_int_impls #end iIncLsbFix_uint16_int(In1: uint16; Shift: int) returns (Out1: uint16) specialize iIncLsbFix ;
   function imported #pragma kcg name iIncLsbFix_uint16_impls #end iIncLsbFix_uint16(In1: uint16; Shift: uint16) returns (Out1: uint16) specialize iIncLsbFix ;
   function imported #pragma kcg name iIncLsbFix_int32_int_impls #end iIncLsbFix_int32_int(In1: int32; Shift: int) returns (Out1: int32) specialize iIncLsbFix ;
   function imported #pragma kcg name iIncLsbFix_int32_impls #end iIncLsbFix_int32(In1: int32; Shift: int32) returns (Out1: int32) specialize iIncLsbFix ;
   function imported #pragma kcg name iIncLsbFix_uint32_int_impls #end iIncLsbFix_uint32_int(In1: uint32; Shift: int) returns (Out1: uint32) specialize iIncLsbFix ;
   function imported #pragma kcg name iIncLsbFix_uint32_impls #end iIncLsbFix_uint32(In1: uint32; Shift: uint32) returns (Out1: uint32) specialize iIncLsbFix ;

end;
