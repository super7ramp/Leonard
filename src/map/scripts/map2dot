#!/usr/bin/env python3

import sys

# Convert map file to dot
# Syntax: map2dot input.map > output.dot
class Converter:

    def __init__(self):
        self.currentState = 'INIT'

    def parseLineInit(self, line):
        if line == 'nodes:':
            self.currentState = 'NODES'

    def parseLineNodes(self, line):
        if line == 'edges:':
            self.currentState = 'ADJACENCIES'
        else:
            name = line.split(',',1)[0]
            pos = line.split(',',1)[1]
            print('  ' + name + ' [shape="circle" pos = "' + pos + '!"]')

    def parseLineAdjacencies(self, line):
        adjacencyList = line.split(',')
        origin = adjacencyList.pop(0)
        for neighbour in adjacencyList:
            print('  ' + origin + ' -> ' + neighbour)

    def convertMap(self, mapfile):
        print('digraph map {')
        for line in mapfile:
            if self.currentState == 'INIT':
                self.parseLineInit(line.rstrip('\n'))
            elif self.currentState == 'NODES':
                self.parseLineNodes(line.rstrip('\n'))
            elif self.currentState == 'ADJACENCIES':
                self.parseLineAdjacencies(line.rstrip('\n'))
        print('}')
        self.currentState = 'DONE'


if __name__ == '__main__':
    if len(sys.argv) < 2:
        sys.exit("Syntax: " + sys.argv[0] + " file.map")
    with open(sys.argv[1], 'r') as mapfile:
        converter = Converter()
        converter.convertMap(mapfile)
    mapfile.closed

